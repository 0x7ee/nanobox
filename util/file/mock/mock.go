// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/nanobox-io/nanobox/util/file (interfaces: File)

package mock_file

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *_MockFileRecorder
}

// Recorder for MockFile (not exported)
type _MockFileRecorder struct {
	mock *MockFile
}

func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &_MockFileRecorder{mock}
	return mock
}

func (_m *MockFile) EXPECT() *_MockFileRecorder {
	return _m.recorder
}

func (_m *MockFile) Download(_param0 string, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "Download", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Download(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Download", arg0, arg1)
}

func (_m *MockFile) Gzip() {
	_m.ctrl.Call(_m, "Gzip")
}

func (_mr *_MockFileRecorder) Gzip() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Gzip")
}

func (_m *MockFile) Progress(_param0 string, _param1 io.Writer) error {
	ret := _m.ctrl.Call(_m, "Progress", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileRecorder) Progress(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Progress", arg0, arg1)
}

func (_m *MockFile) Tar() {
	_m.ctrl.Call(_m, "Tar")
}

func (_mr *_MockFileRecorder) Tar() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tar")
}

func (_m *MockFile) TarBall() {
	_m.ctrl.Call(_m, "TarBall")
}

func (_mr *_MockFileRecorder) TarBall() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TarBall")
}
