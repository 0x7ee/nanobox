// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/nanobox-io/nanobox/util/server (interfaces: Server)

package mock_server

import (
	fsnotify "github.com/go-fsnotify/fsnotify"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
)

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) Bootstrap(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Bootstrap", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Bootstrap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Bootstrap", arg0)
}

func (_m *MockServer) Build(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Build", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Build(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Build", arg0)
}

func (_m *MockServer) Deploy(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Deploy", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Deploy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deploy", arg0)
}

func (_m *MockServer) Exec(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Exec", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec", arg0, arg1)
}

func (_m *MockServer) Get(_param0 string, _param1 interface{}) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockServer) IsContainerExec(_param0 []string) bool {
	ret := _m.ctrl.Call(_m, "IsContainerExec", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockServerRecorder) IsContainerExec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsContainerExec", arg0)
}

func (_m *MockServer) Lock() {
	_m.ctrl.Call(_m, "Lock")
}

func (_mr *_MockServerRecorder) Lock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lock")
}

func (_m *MockServer) Logs(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Logs", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Logs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logs", arg0)
}

func (_m *MockServer) NewLogger(_param0 string) {
	_m.ctrl.Call(_m, "NewLogger", _param0)
}

func (_mr *_MockServerRecorder) NewLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewLogger", arg0)
}

func (_m *MockServer) NotifyRebuild(_param0 *fsnotify.Event) error {
	ret := _m.ctrl.Call(_m, "NotifyRebuild", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) NotifyRebuild(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyRebuild", arg0)
}

func (_m *MockServer) NotifyServer(_param0 *fsnotify.Event) error {
	ret := _m.ctrl.Call(_m, "NotifyServer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) NotifyServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyServer", arg0)
}

func (_m *MockServer) Ping() (bool, error) {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockServer) Post(_param0 string, _param1 string, _param2 io.Reader) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Post", _param0, _param1, _param2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Post", arg0, arg1, arg2)
}

func (_m *MockServer) Put(_param0 string, _param1 io.Reader) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Put", _param0, _param1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockServer) Suspend() error {
	ret := _m.ctrl.Call(_m, "Suspend")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Suspend() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Suspend")
}

func (_m *MockServer) Unlock() {
	_m.ctrl.Call(_m, "Unlock")
}

func (_mr *_MockServerRecorder) Unlock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlock")
}

func (_m *MockServer) Update(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}
