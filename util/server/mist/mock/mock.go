// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/nanobox-io/nanobox/util/server/mist (interfaces: Mist)

package mock_mist

import (
	gomock "github.com/golang/mock/gomock"
	mist "github.com/nanobox-io/nanobox/util/server/mist"
	core "github.com/nanopack/mist/core"
)

// Mock of Mist interface
type MockMist struct {
	ctrl     *gomock.Controller
	recorder *_MockMistRecorder
}

// Recorder for MockMist (not exported)
type _MockMistRecorder struct {
	mock *MockMist
}

func NewMockMist(ctrl *gomock.Controller) *MockMist {
	mock := &MockMist{ctrl: ctrl}
	mock.recorder = &_MockMistRecorder{mock}
	return mock
}

func (_m *MockMist) EXPECT() *_MockMistRecorder {
	return _m.recorder
}

func (_m *MockMist) BootstrapUpdates(_param0 string) error {
	ret := _m.ctrl.Call(_m, "BootstrapUpdates", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMistRecorder) BootstrapUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BootstrapUpdates", arg0)
}

func (_m *MockMist) BuildUpdates(_param0 string) error {
	ret := _m.ctrl.Call(_m, "BuildUpdates", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMistRecorder) BuildUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildUpdates", arg0)
}

func (_m *MockMist) Connect(_param0 []string, _param1 func(mist.Log)) (core.Client, error) {
	ret := _m.ctrl.Call(_m, "Connect", _param0, _param1)
	ret0, _ := ret[0].(core.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMistRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect", arg0, arg1)
}

func (_m *MockMist) DeployUpdates(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeployUpdates", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMistRecorder) DeployUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeployUpdates", arg0)
}

func (_m *MockMist) ImageUpdates(_param0 string) error {
	ret := _m.ctrl.Call(_m, "ImageUpdates", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMistRecorder) ImageUpdates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageUpdates", arg0)
}

func (_m *MockMist) Listen(_param0 []string, _param1 func(string) error) error {
	ret := _m.ctrl.Call(_m, "Listen", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMistRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Listen", arg0, arg1)
}

func (_m *MockMist) PrintLogStream(_param0 mist.Log) {
	_m.ctrl.Call(_m, "PrintLogStream", _param0)
}

func (_mr *_MockMistRecorder) PrintLogStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrintLogStream", arg0)
}

func (_m *MockMist) ProcessLog(_param0 mist.Log) {
	_m.ctrl.Call(_m, "ProcessLog", _param0)
}

func (_mr *_MockMistRecorder) ProcessLog(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessLog", arg0)
}

func (_m *MockMist) ProcessLogStream(_param0 mist.Log) {
	_m.ctrl.Call(_m, "ProcessLogStream", _param0)
}

func (_mr *_MockMistRecorder) ProcessLogStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessLogStream", arg0)
}

func (_m *MockMist) Stream(_param0 []string, _param1 func(mist.Log)) {
	_m.ctrl.Call(_m, "Stream", _param0, _param1)
}

func (_mr *_MockMistRecorder) Stream(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stream", arg0, arg1)
}
